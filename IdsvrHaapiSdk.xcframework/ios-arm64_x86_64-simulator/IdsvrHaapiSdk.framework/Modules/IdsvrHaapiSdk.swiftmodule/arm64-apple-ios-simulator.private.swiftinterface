// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name IdsvrHaapiSdk
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import CommonCrypto
import Compression
import CryptoKit
import DeviceCheck
import Foundation
@_exported import IdsvrHaapiSdk
import LocalAuthentication
import OSLog
import Security
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
public class FormField : Swift.Equatable {
  final public let name: Swift.String
  final public let label: IdsvrHaapiSdk.Message?
  final public let placeholder: IdsvrHaapiSdk.Message?
  public static func == (lhs: IdsvrHaapiSdk.FormField, rhs: IdsvrHaapiSdk.FormField) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class PasswordFormField : IdsvrHaapiSdk.FormField {
  final public let value: Swift.String?
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class UsernameFormField : IdsvrHaapiSdk.FormField {
  final public let value: Swift.String?
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class TextFormField : IdsvrHaapiSdk.FormField {
  @frozen public enum Kind : Swift.RawRepresentable, Swift.Decodable, Swift.Equatable {
    public typealias RawValue = Swift.String
    case number
    case email
    case url
    case tel
    case color
    case unknown(value: Swift.String)
    public init(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  final public let kind: IdsvrHaapiSdk.TextFormField.Kind?
  final public let value: Swift.String?
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class SelectFormField : IdsvrHaapiSdk.FormField {
  final public let options: [IdsvrHaapiSdk.SelectFormField.Option]
  final public let value: Swift.String?
  public struct Option : Swift.Decodable, Swift.Equatable {
    public let label: IdsvrHaapiSdk.Message
    public let value: Swift.String
    public let selected: Swift.Bool
    public init(from decoder: any Swift.Decoder) throws
    public static func == (a: IdsvrHaapiSdk.SelectFormField.Option, b: IdsvrHaapiSdk.SelectFormField.Option) -> Swift.Bool
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class CheckboxFormField : IdsvrHaapiSdk.FormField {
  final public let checked: Swift.Bool
  final public let readonly: Swift.Bool
  final public let value: Swift.String?
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class ContextFormField : IdsvrHaapiSdk.FormField {
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class HiddenFormField : IdsvrHaapiSdk.FormField {
  final public let value: Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class Haapi : ObjectiveC.NSObject {
  @objc public static var isSupported: Swift.Bool {
    @objc get
  }
  @available(*, unavailable)
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS 14, *)
public struct ResponseAndData {
  public let response: Foundation.URLResponse
  public let data: Foundation.Data?
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14.0, *)
public class HaapiClient : ObjectiveC.NSObject {
  public var dpop: IdsvrHaapiSdk.Dpop? {
    get
  }
  public func performDataTask(for urlRequest: Foundation.URLRequest, completionHandler: @escaping (Swift.Result<IdsvrHaapiSdk.ResponseAndData, any Swift.Error>) -> Swift.Void)
  @available(swift, obsoleted: 1.0)
  @objc public func performDataTask(for urlRequest: Foundation.URLRequest, completionHandler: @escaping (Foundation.Data?, Foundation.URLResponse?, (any Swift.Error)?) -> Swift.Void)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14, *)
@objcMembers public class HaapiTokenResult : ObjectiveC.NSObject {
  @objc final public let dPopAccessTokenInfo: IdsvrHaapiSdk.DpopAccessTokenInfo?
  @objc final public let error: (any Swift.Error)?
  @objc deinit
}
@available(iOS 14.0, *)
public typealias HttpHeadersProvider = () -> [Swift.String : Swift.String]
@available(iOS 14.0, *)
public typealias OAuthAuthorizationParametersProvider = () -> IdsvrHaapiSdk.OAuthAuthorizationParameters
@available(iOS 14.0, *)
public protocol HaapiConfigurable {
  var name: Swift.String { get }
  var clientId: Swift.String { get }
  var baseURL: Foundation.URL { get }
  var tokenEndpointURL: Foundation.URL { get }
  var authorizationEndpointURL: Foundation.URL { get }
  var appRedirect: Swift.String { get }
  var urlSession: Foundation.URLSession { get }
  var isAutoRedirect: Swift.Bool { get }
  var httpHeadersProvider: IdsvrHaapiSdk.HttpHeadersProvider? { get }
  var authorizationParametersProvider: IdsvrHaapiSdk.OAuthAuthorizationParametersProvider? { get }
  var minTokenTtl: Foundation.TimeInterval { get }
  var attestationConfiguration: IdsvrHaapiSdk.AttestationConfiguration { get }
}
@available(iOS 14.0, *)
final public class HaapiConfiguration : IdsvrHaapiSdk.HaapiConfigurable, IdsvrHaapiSdk.OAuthTokenConfigurable {
  final public let name: Swift.String
  final public let clientId: Swift.String
  final public let baseURL: Foundation.URL
  final public let tokenEndpointURL: Foundation.URL
  final public let authorizationEndpointURL: Foundation.URL
  final public let appRedirect: Swift.String
  final public let httpHeadersProvider: IdsvrHaapiSdk.HttpHeadersProvider?
  final public let isAutoRedirect: Swift.Bool
  final public let urlSession: Foundation.URLSession
  final public let revocationEndpointURL: Foundation.URL?
  final public let authorizationParametersProvider: IdsvrHaapiSdk.OAuthAuthorizationParametersProvider?
  final public let minTokenTtl: Foundation.TimeInterval
  final public let attestationConfiguration: IdsvrHaapiSdk.AttestationConfiguration
  public init(name: Swift.String, clientId: Swift.String, baseURL: Foundation.URL, tokenEndpointURL: Foundation.URL, authorizationEndpointURL: Foundation.URL, appRedirect: Swift.String, httpHeadersProvider: IdsvrHaapiSdk.HttpHeadersProvider?, authorizationParametersProvider: IdsvrHaapiSdk.OAuthAuthorizationParametersProvider?, isAutoRedirect: Swift.Bool = true, urlSession: Foundation.URLSession = URLSession(configuration: .haapi), revocationEndpointURL: Foundation.URL? = nil, minTokenTtl: Foundation.TimeInterval = TimeInterval(floatLiteral: 10.0), attestationConfiguration: IdsvrHaapiSdk.AttestationConfiguration = AttestationConfiguration())
  @objc deinit
}
@available(iOS 14.0, *)
extension Foundation.URLSessionConfiguration {
  public static var haapi: Foundation.URLSessionConfiguration {
    get
  }
}
@available(iOS 14.0, *)
public struct AttestationConfiguration {
  public init(useAttestation: Swift.Bool = true, attestationMaxRetries: Swift.Int = 3)
}
@available(iOS 14.0, *)
public class Problem : IdsvrHaapiSdk.ProblemRepresentation, Swift.Decodable, Swift.Equatable {
  final public let type: IdsvrHaapiSdk.ProblemType
  final public let metadata: IdsvrHaapiSdk.Metadata?
  final public let title: IdsvrHaapiSdk.Message?
  final public let messages: [IdsvrHaapiSdk.UserMessage]
  final public let links: [IdsvrHaapiSdk.Link]
  public static func == (lhs: IdsvrHaapiSdk.Problem, rhs: IdsvrHaapiSdk.Problem) -> Swift.Bool
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@available(iOS 14.0, *)
public typealias OAuthCompletion = (_ tokenResponse: IdsvrHaapiSdk.TokenResponse) -> Swift.Void
@available(iOS 14.0, *)
public typealias OAuthRevocationCompletion = (_ response: IdsvrHaapiSdk.TokenRevocationResponse) -> Swift.Void
@available(iOS 14.0, *)
@frozen public enum TokenResponse {
  case successfulToken(IdsvrHaapiSdk.SuccessfulTokenResponse)
  case errorToken(IdsvrHaapiSdk.ErrorTokenResponse)
  case error(any Swift.Error)
}
@available(iOS 14.0, *)
@frozen public enum TokenRevocationResponse {
  case success
  case error(any Swift.Error)
}
@available(iOS 14.0, *)
public protocol OAuthTokenConfigurable {
  var clientId: Swift.String { get }
  var tokenEndpointURL: Foundation.URL { get }
  var appRedirect: Swift.String { get }
  var urlSession: Foundation.URLSession { get }
  var revocationEndpointURL: Foundation.URL? { get }
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class OAuthTokenManager {
  convenience public init(oauthTokenConfiguration: any IdsvrHaapiSdk.OAuthTokenConfigurable)
  final public func fetchAccessToken(with authorizationCode: Swift.String, dpop: IdsvrHaapiSdk.Dpop? = nil, completionHandler: @escaping IdsvrHaapiSdk.OAuthCompletion)
  final public func refreshAccessToken(with refreshToken: Swift.String, completionHandler: @escaping IdsvrHaapiSdk.OAuthCompletion)
  final public func revokeAccessToken(with token: Swift.String, completionHandler: @escaping IdsvrHaapiSdk.OAuthRevocationCompletion)
  final public func revokeRefreshToken(with token: Swift.String, completionHandler: @escaping IdsvrHaapiSdk.OAuthRevocationCompletion)
  @objc deinit
}
@available(iOS 14.0, *)
@frozen public enum HaapiResult {
  case representation(any IdsvrHaapiSdk.HaapiRepresentation)
  case problem(any IdsvrHaapiSdk.ProblemRepresentation)
  case error(any Swift.Error)
}
@available(iOS 14.0, *)
public protocol HaapiRepresentation {
  var metadata: IdsvrHaapiSdk.Metadata? { get }
  var type: IdsvrHaapiSdk.RepresentationType { get }
  var properties: (any IdsvrHaapiSdk.Properties)? { get }
  var links: [IdsvrHaapiSdk.Link] { get }
  var messages: [IdsvrHaapiSdk.UserMessage] { get }
}
@available(iOS 14.0, *)
public protocol ProblemRepresentation {
  var metadata: IdsvrHaapiSdk.Metadata? { get }
  var type: IdsvrHaapiSdk.ProblemType { get }
  var title: IdsvrHaapiSdk.Message? { get }
  var messages: [IdsvrHaapiSdk.UserMessage] { get }
  var links: [IdsvrHaapiSdk.Link] { get }
}
@available(iOS 14.0, *)
public protocol ClientOperationStep : IdsvrHaapiSdk.HaapiRepresentation {
}
@available(iOS 14.0, *)
public struct Metadata : Swift.Decodable, Swift.Equatable {
  public static func == (a: IdsvrHaapiSdk.Metadata, b: IdsvrHaapiSdk.Metadata) -> Swift.Bool
  public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14, *)
@objcMembers public class Dpop : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let jwkThumbprint: Swift.String
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
  @objc @available(swift, obsoleted: 0.1, message: "Use `createProof(httpMethod: String, url: URL, nonce: String?, accessToken: String?)` instead")
  public func createProof(httpMethod: Swift.String, url: Foundation.URL) throws -> Swift.String
  @objc public func createProof(httpMethod: Swift.String, url: Foundation.URL, nonce: Swift.String? = nil, accessToken: Swift.String? = nil) throws -> Swift.String
  @objc @available(swift, obsoleted: 0.1, message: "Use `getHeaderValue(httpMethod: String, url: URL, nonce: String?, accessToken: String?)` instead")
  public func getHeaderValue(httpMethod: Swift.String, url: Foundation.URL) throws -> Swift.String
  @objc public func getHeaderValue(httpMethod: Swift.String, url: Foundation.URL, nonce: Swift.String? = nil, accessToken: Swift.String? = nil) throws -> Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class HaapiLogger : ObjectiveC.NSObject {
  public static var followUpTags: [any IdsvrHaapiSdk.FollowUpTag] {
    get
    set
  }
  @objc public static var isDebugEnabled: Swift.Bool
  @objc public static var isInfoEnabled: Swift.Bool
  @objc public static var isWarningEnabled: Swift.Bool
  @objc public static var isErrorEnabled: Swift.Bool
  @objc public static var isSensitiveValueMasked: Swift.Bool
  @objc deinit
}
@available(iOS 14, *)
public enum HaapiError : Swift.Error {
  case communication(message: Swift.String, cause: (any Swift.Error)? = nil)
  case serverError(_: Swift.String, errorDescription: Swift.String, statusCode: Swift.Int)
  case invalidStatusCode(_: Swift.Int)
  case attestationNotSupported
  case attestationFailure(cause: (any Swift.Error)? = nil)
  case attestationKeyGenFailure(cause: (any Swift.Error)? = nil)
  case attestationRefusedByServer(cause: (any Swift.Error)? = nil)
  case assertionFailure(cause: (any Swift.Error)? = nil)
  case dpopKeyCreationFailure(cause: any Swift.Error)
  case dpopProofCreationFailure(cause: any Swift.Error)
  case haapiTokenManagerIsClosed
  case haapiTokenManagerIsExpired
  case illegalState(message: Swift.String)
  case invalidConfiguration(reason: Swift.String)
  case haapiTokenManagerAlreadyExists(name: Swift.String)
}
@available(iOS 14, *)
extension IdsvrHaapiSdk.HaapiError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14.0, *)
@objcMembers final public class HaapiTokenManager : ObjectiveC.NSObject {
  @objc final public var dpop: IdsvrHaapiSdk.Dpop? {
    @objc get
  }
  @objc deinit
}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.HaapiTokenManager {
  @objc final public func createClient(urlSession: Foundation.URLSession? = nil) -> IdsvrHaapiSdk.HaapiClient
  @objc @available(swift, obsoleted: 1.0)
  final public func getHaapiToken(forceFresh: Swift.Bool = false, dpopNonce: Swift.String? = nil, completionHandler: @escaping (IdsvrHaapiSdk.DpopAccessTokenInfo?, (any Swift.Error)?) -> Swift.Void)
  @objc @available(swift, obsoleted: 1.0)
  final public func getHaapiToken(forceFresh: Swift.Bool = false, completionHandler: @escaping (IdsvrHaapiSdk.DpopAccessTokenInfo?, (any Swift.Error)?) -> Swift.Void)
  final public func getHaapiToken(forceFresh: Swift.Bool = false, dpopNonce: Swift.String? = nil, completionHandler: @escaping (Swift.Result<IdsvrHaapiSdk.DpopAccessTokenInfo, IdsvrHaapiSdk.HaapiError>) -> Swift.Void)
  @objc final public func close()
  @objc final public func clearState()
  @available(*, unavailable, renamed: "getHaapiToken(forceFresh:dpopNonce:completionHandler:)", message: "Deprecated. Please use getHaapiToken(forceFresh:dpopNonce:completionHandler:)")
  final public func getHaapiTokenAsync(forceFresh: Swift.Bool = false, callbackDispatchQueue: Dispatch.DispatchQueue = DispatchQueue.main, dpopNonce: Swift.String? = nil, completionHandler: @escaping (Swift.Result<IdsvrHaapiSdk.DpopAccessTokenInfo, IdsvrHaapiSdk.HaapiError>) -> Swift.Void)
  @objc @available(*, unavailable, renamed: "getHaapiTokenWithForceFresh", message: "Deprecated. Please use getHaapiTokenWithForceFresh:dpopNonce:completionHandler:")
  final public func getHaapiTokenAsync(forceFresh: Swift.Bool = false, callbackDispatchQueue: Dispatch.DispatchQueue = DispatchQueue.main, completionHandler: @escaping (IdsvrHaapiSdk.DpopAccessTokenInfo?, (any Swift.Error)?) -> Swift.Void)
  @objc @available(*, unavailable, renamed: "getHaapiTokenWithForceFresh", message: "Deprecated. Please use getHaapiTokenWithForceFresh:dpopNonce:completionHandler:")
  final public func getHaapiTokenAsync(forceFresh: Swift.Bool = false, callbackDispatchQueue: Dispatch.DispatchQueue = DispatchQueue.main, dpopNonce: Swift.String? = nil, completionHandler: @escaping (IdsvrHaapiSdk.DpopAccessTokenInfo?, (any Swift.Error)?) -> Swift.Void)
  @objc @available(*, unavailable, renamed: "getHaapiTokenWithForceFresh", message: "Deprecated. Please use getHaapiTokenWithForceFresh:dpopNonce:completionHandler:")
  final public func getHaapiToken(forceFresh: Swift.Bool = false) -> IdsvrHaapiSdk.HaapiTokenResult?
  @objc @available(*, unavailable, renamed: "getHaapiTokenWithForceFresh", message: "Deprecated. Please use getHaapiTokenWithForceFresh:dpopNonce:completionHandler:")
  final public func getHaapiToken(forceFresh: Swift.Bool = false, dpopNonce: Swift.String?) -> IdsvrHaapiSdk.HaapiTokenResult?
}
@available(iOS 14.0, *)
@frozen public enum ProblemType : Swift.Decodable, Swift.Equatable {
  case authenticationFailedProblem
  case invalidInputProblem
  case incorrectCredentialsProblem
  case errorAuthorizationResponseProblem
  case unexpectedProblem
  case tooManyAttemptsProblem
  case genericUserProblem
  case sessionAndAccessTokenMismatchProblem
  case other(value: Swift.String)
}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.ProblemType : Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  public init?(rawValue: IdsvrHaapiSdk.ProblemType.RawValue)
  public var rawValue: IdsvrHaapiSdk.ProblemType.RawValue {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
public class Action : Swift.Equatable {
  final public let kind: IdsvrHaapiSdk.ActionKind
  final public let title: IdsvrHaapiSdk.Message?
  public static func == (lhs: IdsvrHaapiSdk.Action, rhs: IdsvrHaapiSdk.Action) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class ClientOperationAction : IdsvrHaapiSdk.Action {
  final public let model: IdsvrHaapiSdk.ClientOperationActionModel
  final public let properties: IdsvrHaapiSdk.ClientOperationAction.Properties?
  public struct Properties : Swift.Decodable, Swift.Equatable {
    public let rawJsonString: Swift.String
    public static func == (a: IdsvrHaapiSdk.ClientOperationAction.Properties, b: IdsvrHaapiSdk.ClientOperationAction.Properties) -> Swift.Bool
    public init(from decoder: any Swift.Decoder) throws
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class FormAction : IdsvrHaapiSdk.Action {
  final public let model: IdsvrHaapiSdk.FormActionModel
  final public let properties: IdsvrHaapiSdk.FormAction.Properties?
  public struct Properties : Swift.Decodable, Swift.Equatable {
    public let authenticatorType: Swift.String
    public let rawJsonString: Swift.String
    public static func == (a: IdsvrHaapiSdk.FormAction.Properties, b: IdsvrHaapiSdk.FormAction.Properties) -> Swift.Bool
    public init(from decoder: any Swift.Decoder) throws
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 14.0, *)
final public class SelectorAction : IdsvrHaapiSdk.Action {
  final public let model: IdsvrHaapiSdk.SelectorActionModel
  final public let properties: IdsvrHaapiSdk.SelectorAction.Properties?
  public struct Properties : Swift.Decodable, Swift.Equatable {
    public let rawJsonString: Swift.String
    public static func == (a: IdsvrHaapiSdk.SelectorAction.Properties, b: IdsvrHaapiSdk.SelectorAction.Properties) -> Swift.Bool
    public init(from decoder: any Swift.Decoder) throws
  }
  @objc deinit
}
@available(iOS 14, *)
public enum HttpHeaderNames {
  public static let accept: Swift.String
  public static let authorization: Swift.String
  public static let contentType: Swift.String
  public static let dpop: Swift.String
  public static let haapiSessionId: Swift.String
  public static let haapiSetSessionId: Swift.String
  public static let dpopNonce: Swift.String
  public static let wwwAuthenticate: Swift.String
}
@available(iOS 14, *)
public enum MimeTypes : Swift.String {
  case happi
  case json
  case xWwwFormUrlEncoded
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 14.0, *)
public protocol Properties {
  var rawJsonString: Swift.String { get }
}
@available(iOS 14.0, *)
public struct GenericProperties : IdsvrHaapiSdk.Properties, Swift.Decodable {
  public let rawJsonString: Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 14.0, *)
public struct OAuthAuthorizationResponseProperties : IdsvrHaapiSdk.Properties {
  public let rawJsonString: Swift.String
  public let scope: Swift.String?
  public let state: Swift.String?
  public let code: Swift.String?
  public let idToken: Swift.String?
  public let rawJson: [Swift.String : Swift.String]
}
@available(iOS 14.0, *)
public struct PollingProperties : IdsvrHaapiSdk.Properties {
  public let rawJsonString: Swift.String
  public let recipientOfCommunication: Swift.String?
  public let status: IdsvrHaapiSdk.PollingStatus
}
public enum SdkFollowUpTag : Swift.String, IdsvrHaapiSdk.FollowUpTag, Swift.CaseIterable {
  case flow
  case http
  case mapping
  case oAuth
  public var subsystem: Swift.String {
    get
  }
  public var tagName: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [IdsvrHaapiSdk.SdkFollowUpTag]
  public typealias RawValue = Swift.String
  public static var allCases: [IdsvrHaapiSdk.SdkFollowUpTag] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public protocol FollowUpTag {
  var subsystem: Swift.String { get }
  var tagName: Swift.String { get }
}
extension IdsvrHaapiSdk.FollowUpTag {
  public var osLog: os.OSLog {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14, *)
@objcMembers public class AccessToken : ObjectiveC.NSObject {
  @objc final public let value: Swift.String
  @objc final public let expiresOn: Foundation.Date
  @objc public func isValid(atTime: Foundation.Date, minTtl: Foundation.TimeInterval) -> Swift.Bool
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14, *)
@objcMembers public class DpopAccessTokenInfo : ObjectiveC.NSObject {
  @objc final public let accessToken: IdsvrHaapiSdk.AccessToken
  @objc final public let dpop: IdsvrHaapiSdk.Dpop
  @objc final public let dpopNonce: Swift.String?
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  @objc public func dpopHeaderValue(httpMethod: Swift.String, url: Foundation.URL) throws -> Swift.String
  @objc public func authorizationHeaderValue() -> Swift.String
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc deinit
}
@available(iOS 14.0, *)
public struct UserMessage : Swift.Decodable, Swift.Equatable {
  public let text: IdsvrHaapiSdk.Message
  public let classList: [Swift.String]
  public init(from decoder: any Swift.Decoder) throws
  public static func == (a: IdsvrHaapiSdk.UserMessage, b: IdsvrHaapiSdk.UserMessage) -> Swift.Bool
}
@available(iOS 14.0, *)
@frozen public enum ActionKind : Swift.Decodable, Swift.Equatable {
  case cancel
  case deviceOption
  case login
  case `continue`
  case continueAutoLogin
  case deviceSelector
  case redirect
  case authenticatorSelector
  case selectAuthenticator
  case poll
  case form
  case bankIdSameDevice
  case bankIdOtherDevice
  case passwordReset
  case accountIdRecovery
  case userRegister
  case other(value: Swift.String)
}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.ActionKind : Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  public init(rawValue: IdsvrHaapiSdk.ActionKind.RawValue)
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 14.0, *)
public typealias HaapiCompletionHandler = (_ haapiResult: IdsvrHaapiSdk.HaapiResult) -> Swift.Void
@objc @available(iOS 14.0, *)
final public class HaapiManager : ObjectiveC.NSObject {
  public init(haapiConfiguration: any IdsvrHaapiSdk.HaapiConfigurable) throws
  @objc deinit
  final public func close()
  public static var isSupported: Swift.Bool {
    get
  }
  final public func start(completionHandler: @escaping IdsvrHaapiSdk.HaapiCompletionHandler)
  #if compiler(>=5.3) && $AsyncAwait
  final public func start() async -> IdsvrHaapiSdk.HaapiResult
  #endif
  final public func submitForm(_ form: IdsvrHaapiSdk.FormActionModel, parameters: [Swift.String : Any], completionHandler: @escaping IdsvrHaapiSdk.HaapiCompletionHandler)
  #if compiler(>=5.3) && $AsyncAwait
  final public func submitForm(_ form: IdsvrHaapiSdk.FormActionModel, parameters: [Swift.String : Any]) async -> IdsvrHaapiSdk.HaapiResult
  #endif
  final public func followLink(_ link: IdsvrHaapiSdk.Link, completionHandler: @escaping IdsvrHaapiSdk.HaapiCompletionHandler)
  #if compiler(>=5.3) && $AsyncAwait
  final public func followLink(_ link: IdsvrHaapiSdk.Link) async -> IdsvrHaapiSdk.HaapiResult
  #endif
  final public var dpop: IdsvrHaapiSdk.Dpop? {
    get
  }
}
public enum DriverFollowUpTag : Swift.String, IdsvrHaapiSdk.FollowUpTag, Swift.CaseIterable {
  case flow
  case storage
  case http
  case attestation
  public var subsystem: Swift.String {
    get
  }
  public var tagName: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [IdsvrHaapiSdk.DriverFollowUpTag]
  public typealias RawValue = Swift.String
  public static var allCases: [IdsvrHaapiSdk.DriverFollowUpTag] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 14.0, *)
public struct Link : IdsvrHaapiSdk.RepresentationActionModel {
  public let href: Swift.String
  public let rel: Swift.String
  public let title: IdsvrHaapiSdk.Message?
  public let type: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public static func == (a: IdsvrHaapiSdk.Link, b: IdsvrHaapiSdk.Link) -> Swift.Bool
}
@available(iOS 14.0, *)
public struct OAuthAuthorizationParameters {
  public let scopes: [Swift.String]
  public let nonce: Swift.String?
  public let acrValues: [Swift.String]
  public let extraRequestParameters: [Swift.String : Swift.String]
  public init(scopes: [Swift.String] = [], nonce: Swift.String? = nil, acrValues: [Swift.String] = [], extraRequestParameters: [Swift.String : Swift.String] = [:])
}
@available(iOS 14, *)
extension Foundation.URLResponse {
  public func haapiSessionId() -> Swift.String?
  public func dpopNonce() -> Swift.String?
}
@available(iOS 14, *)
extension Foundation.URLRequest {
  public mutating func addAuthorizationHeader(headerValue: Swift.String)
  public mutating func addDpopHeader(headerValue: Swift.String)
  public mutating func addDpopAccessTokenHeaders(from dpopAccessTokenInfo: IdsvrHaapiSdk.DpopAccessTokenInfo, httpMethod: Swift.String, url: Foundation.URL) throws
  public mutating func addHaapiMediaTypeAcceptHeader()
  public mutating func addHaapiSessionIdHeader(_ sessionId: Swift.String)
}
@available(iOS 14.0, *)
@frozen public enum RepresentationType : Swift.Decodable, Swift.Equatable {
  case authenticationStep
  case redirectionStep
  case registrationStep
  case pollingStep
  case continueSameStep
  case oauthAuthorizationResponse
  case consentorStep
  case userConsentStep
}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.RepresentationType : Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 14.0, *)
public struct SuccessfulTokenResponse : Swift.Decodable, Swift.Equatable {
  public let accessToken: Swift.String
  public let tokenType: Swift.String?
  public let scope: Swift.String?
  public let expiresIn: Swift.Int
  public let refreshToken: Swift.String?
  public let idToken: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public static func == (a: IdsvrHaapiSdk.SuccessfulTokenResponse, b: IdsvrHaapiSdk.SuccessfulTokenResponse) -> Swift.Bool
}
@available(iOS 14.0, *)
public struct ErrorTokenResponse : Swift.Decodable, Swift.CustomDebugStringConvertible {
  public let error: Swift.String
  public let errorDescription: Swift.String
  public init(from decoder: any Swift.Decoder) throws
  public var debugDescription: Swift.String {
    get
  }
}
@objc @available(iOS 14.0, *)
@objcMembers public class HaapiTokenManagerBuilder : ObjectiveC.NSObject {
  @objc public init(tokenEndpoint: Foundation.URL, clientId: Swift.String)
  @objc @discardableResult
  public func setName(_ name: Swift.String) -> IdsvrHaapiSdk.HaapiTokenManagerBuilder
  @objc @discardableResult
  public func setInternalUrlSession(_ urlSession: Foundation.URLSession) -> IdsvrHaapiSdk.HaapiTokenManagerBuilder
  @objc @discardableResult
  public func setHaapiTokenMinTtl(_ minTtl: Foundation.TimeInterval) -> IdsvrHaapiSdk.HaapiTokenManagerBuilder
  @objc @discardableResult
  public func disableDeviceCheckAttestation() -> IdsvrHaapiSdk.HaapiTokenManagerBuilder
  @objc @discardableResult
  public func setAttestationMaxRetryCount(maxRetries: Swift.Int) -> IdsvrHaapiSdk.HaapiTokenManagerBuilder
  @objc public func build() throws -> IdsvrHaapiSdk.HaapiTokenManager
  @objc deinit
}
@available(iOS 14, *)
public enum StorageError : Swift.Error {
  case writeError(cause: any Swift.Error)
  case readError(cause: any Swift.Error)
  case deleteError(cause: any Swift.Error)
}
@available(iOS 14, *)
extension IdsvrHaapiSdk.StorageError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@available(iOS 14, *)
public protocol Storage {
  func read(key: Swift.String) throws -> Foundation.Data?
  func write(key: Swift.String, data: Foundation.Data) throws
  func delete(key: Swift.String) throws
}
@_hasMissingDesignatedInitializers @available(iOS 14, *)
public class KeychainStorage : IdsvrHaapiSdk.Storage {
  public func write(key: Swift.String, data: Foundation.Data) throws
  public func read(key: Swift.String) throws -> Foundation.Data?
  public func delete(key: Swift.String) throws
  @objc deinit
}
@available(iOS 14.0, *)
public struct AuthenticatorSelectorStep : IdsvrHaapiSdk.HaapiRepresentation {
  public let title: IdsvrHaapiSdk.Message
  public let authenticators: [IdsvrHaapiSdk.AuthenticatorSelectorStep.AuthenticatorOption]
  public let metadata: IdsvrHaapiSdk.Metadata?
  public let actions: [IdsvrHaapiSdk.Action]
  public let messages: [IdsvrHaapiSdk.UserMessage]
  public let links: [IdsvrHaapiSdk.Link]
  public let properties: (any IdsvrHaapiSdk.Properties)?
  public let type: IdsvrHaapiSdk.RepresentationType
  public struct AuthenticatorOption : Swift.Equatable {
    public let title: IdsvrHaapiSdk.Message
    public let type: Swift.String?
    public let action: IdsvrHaapiSdk.FormAction
    public static func == (a: IdsvrHaapiSdk.AuthenticatorSelectorStep.AuthenticatorOption, b: IdsvrHaapiSdk.AuthenticatorSelectorStep.AuthenticatorOption) -> Swift.Bool
  }
}
@available(iOS 14.0, *)
public struct InteractiveFormStep : IdsvrHaapiSdk.HaapiRepresentation {
  public var actions: [IdsvrHaapiSdk.FormAction]
  public let type: IdsvrHaapiSdk.RepresentationType
  public let metadata: IdsvrHaapiSdk.Metadata?
  public let messages: [IdsvrHaapiSdk.UserMessage]
  public let links: [IdsvrHaapiSdk.Link]
  public let properties: (any IdsvrHaapiSdk.Properties)?
}
@available(iOS 14.0, *)
public struct RedirectionStep : IdsvrHaapiSdk.HaapiRepresentation {
  public let redirectAction: IdsvrHaapiSdk.FormAction
  public let metadata: IdsvrHaapiSdk.Metadata?
  public let actions: [IdsvrHaapiSdk.Action]
  public let properties: (any IdsvrHaapiSdk.Properties)?
  public let links: [IdsvrHaapiSdk.Link]
  public let messages: [IdsvrHaapiSdk.UserMessage]
  public let type: IdsvrHaapiSdk.RepresentationType
}
@available(iOS 14.0, *)
public struct PollingStep : IdsvrHaapiSdk.HaapiRepresentation {
  public let mainAction: IdsvrHaapiSdk.FormAction
  public let cancelAction: IdsvrHaapiSdk.FormAction?
  public let metadata: IdsvrHaapiSdk.Metadata?
  public let actions: [IdsvrHaapiSdk.Action]
  public let messages: [IdsvrHaapiSdk.UserMessage]
  public let links: [IdsvrHaapiSdk.Link]
  public let pollingProperties: IdsvrHaapiSdk.PollingProperties
  public let type: IdsvrHaapiSdk.RepresentationType
  public var properties: (any IdsvrHaapiSdk.Properties)? {
    get
  }
}
@available(iOS 14.0, *)
public struct OAuthAuthorizationResponseStep : IdsvrHaapiSdk.HaapiRepresentation {
  public let metadata: IdsvrHaapiSdk.Metadata?
  public let messages: [IdsvrHaapiSdk.UserMessage]
  public let links: [IdsvrHaapiSdk.Link]
  public let oauthAuthorizationResponseProperties: IdsvrHaapiSdk.OAuthAuthorizationResponseProperties
  public let type: IdsvrHaapiSdk.RepresentationType
  public let actions: [IdsvrHaapiSdk.Action]
  public var properties: (any IdsvrHaapiSdk.Properties)? {
    get
  }
}
@available(iOS 14.0, *)
public struct ContinueSameStep : IdsvrHaapiSdk.HaapiRepresentation {
  public let metadata: IdsvrHaapiSdk.Metadata?
  public let messages: [IdsvrHaapiSdk.UserMessage]
  public let properties: (any IdsvrHaapiSdk.Properties)?
  public let type: IdsvrHaapiSdk.RepresentationType
  public let actions: [IdsvrHaapiSdk.Action]
  public let links: [IdsvrHaapiSdk.Link]
}
@available(iOS 14.0, *)
public struct UserConsentStep : IdsvrHaapiSdk.HaapiRepresentation {
  public let metadata: IdsvrHaapiSdk.Metadata?
  public let actions: [IdsvrHaapiSdk.Action]
  public let messages: [IdsvrHaapiSdk.UserMessage]
  public let links: [IdsvrHaapiSdk.Link]
  public let properties: (any IdsvrHaapiSdk.Properties)?
  public let type: IdsvrHaapiSdk.RepresentationType
}
@available(iOS 14.0, *)
public struct ExternalBrowserClientOperationStep : IdsvrHaapiSdk.ClientOperationStep {
  public let actionModel: IdsvrHaapiSdk.ExternalBrowserClientOperationActionModel
  public let metadata: IdsvrHaapiSdk.Metadata?
  public let type: IdsvrHaapiSdk.RepresentationType
  public let actions: [IdsvrHaapiSdk.Action]
  public let properties: (any IdsvrHaapiSdk.Properties)?
  public let links: [IdsvrHaapiSdk.Link]
  public let messages: [IdsvrHaapiSdk.UserMessage]
  public func urlToLaunch(redirectTo: Swift.String) -> Foundation.URL?
  public func formattedParametersFromURL(_ url: Foundation.URL) throws -> [Swift.String : Swift.String]
  public var actionsToPresent: [IdsvrHaapiSdk.Action] {
    get
  }
  public var continueFormActionModel: IdsvrHaapiSdk.FormActionModel {
    get
  }
}
@available(iOS 14.0, *)
public struct BankIdClientOperationStep : IdsvrHaapiSdk.ClientOperationStep {
  public let activationLink: IdsvrHaapiSdk.Link?
  public let actionModel: IdsvrHaapiSdk.BankIdClientOperationActionModel
  public let metadata: IdsvrHaapiSdk.Metadata?
  public let type: IdsvrHaapiSdk.RepresentationType
  public let actions: [IdsvrHaapiSdk.Action]
  public let links: [IdsvrHaapiSdk.Link]
  public let messages: [IdsvrHaapiSdk.UserMessage]
  public let properties: (any IdsvrHaapiSdk.Properties)?
  public func urlToLaunch(redirectTo: Swift.String) -> Foundation.URL?
  public var continueActions: [IdsvrHaapiSdk.Action] {
    get
  }
  public var errorActions: [IdsvrHaapiSdk.Action] {
    get
  }
}
@available(iOS 14.0, *)
public struct EncapClientOperationStep : IdsvrHaapiSdk.ClientOperationStep {
  public let actionModel: IdsvrHaapiSdk.EncapAutoActivationClientOperationActionModel
  public let metadata: IdsvrHaapiSdk.Metadata?
  public let type: IdsvrHaapiSdk.RepresentationType
  public let actions: [IdsvrHaapiSdk.Action]
  public let links: [IdsvrHaapiSdk.Link]
  public let messages: [IdsvrHaapiSdk.UserMessage]
  public let properties: (any IdsvrHaapiSdk.Properties)?
  public var urlToLaunch: Foundation.URL? {
    get
  }
  public var continueActions: [IdsvrHaapiSdk.Action] {
    get
  }
  public var errorActions: [IdsvrHaapiSdk.Action] {
    get
  }
}
@available(iOS 14.0, *)
public struct WebAuthnRegistrationClientOperationStep : IdsvrHaapiSdk.ClientOperationStep {
  public let actionModel: IdsvrHaapiSdk.WebAuthnRegistrationClientOperationActionModel
  public let metadata: IdsvrHaapiSdk.Metadata?
  public let type: IdsvrHaapiSdk.RepresentationType
  public let actions: [IdsvrHaapiSdk.Action]
  public let links: [IdsvrHaapiSdk.Link]
  public let messages: [IdsvrHaapiSdk.UserMessage]
  public let properties: (any IdsvrHaapiSdk.Properties)?
  public let continueAction: IdsvrHaapiSdk.FormAction
  public var fallbackActions: [IdsvrHaapiSdk.Action] {
    get
  }
  public func formattedParametersForRegistration(credentialOptions: IdsvrHaapiSdk.WebAuthnRegistrationClientOperationActionModel.CredentialRequestOptions, attestationObject: Foundation.Data, rawClientDataJSON: Foundation.Data, credentialID: Foundation.Data, credentialParamType: Swift.String = "public-key") -> [Swift.String : Any]
}
@available(iOS 14.0, *)
public struct WebAuthnAuthenticationClientOperationStep : IdsvrHaapiSdk.ClientOperationStep {
  public let actionModel: IdsvrHaapiSdk.WebAuthnAuthenticationClientOperationActionModel
  public let metadata: IdsvrHaapiSdk.Metadata?
  public let type: IdsvrHaapiSdk.RepresentationType
  public let actions: [IdsvrHaapiSdk.Action]
  public let links: [IdsvrHaapiSdk.Link]
  public let messages: [IdsvrHaapiSdk.UserMessage]
  public let properties: (any IdsvrHaapiSdk.Properties)?
  public let continueAction: IdsvrHaapiSdk.FormAction
  public var fallbackActions: [IdsvrHaapiSdk.Action] {
    get
  }
  public func formattedParametersForAssertion(rawAuthenticatorData: Foundation.Data, rawClientDataJSON: Foundation.Data, signature: Foundation.Data, credentialID: Foundation.Data, credentialParamType: Swift.String = "public-key") -> [Swift.String : Any]
}
@available(iOS 14.0, *)
public struct GenericClientOperationStep : IdsvrHaapiSdk.ClientOperationStep {
  public let actionModel: IdsvrHaapiSdk.GenericClientOperationActionModel
  public let metadata: IdsvrHaapiSdk.Metadata?
  public let type: IdsvrHaapiSdk.RepresentationType
  public let actions: [IdsvrHaapiSdk.Action]
  public let links: [IdsvrHaapiSdk.Link]
  public let messages: [IdsvrHaapiSdk.UserMessage]
  public let properties: (any IdsvrHaapiSdk.Properties)?
}
@available(iOS 14.0, *)
public struct GenericRepresentationStep : IdsvrHaapiSdk.HaapiRepresentation, Swift.Decodable {
  public let properties: (any IdsvrHaapiSdk.Properties)?
  public let actions: [IdsvrHaapiSdk.Action]
  public let links: [IdsvrHaapiSdk.Link]
  public let messages: [IdsvrHaapiSdk.UserMessage]
  public let type: IdsvrHaapiSdk.RepresentationType
  public let metadata: IdsvrHaapiSdk.Metadata?
  public init(from decoder: any Swift.Decoder) throws
}
@available(iOS 14.0, *)
@frozen public enum ClientOperationName : Swift.Decodable, Swift.Equatable {
  case externalBrowser
  case bankId
  case encapAutoActivation
  case webAuthnRegistration
  case webAuthnAuthentication
  case unknown(value: Swift.String)
}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.ClientOperationName : Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  public init(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public protocol Masking {
  var masked: Swift.String { get }
}
extension Swift.String : IdsvrHaapiSdk.Masking {
  public var masked: Swift.String {
    get
  }
}
extension ObjectiveC.NSObject : IdsvrHaapiSdk.Masking {
  public var masked: Swift.String {
    get
  }
}
extension Foundation.URL : IdsvrHaapiSdk.Masking {
  public var masked: Swift.String {
    get
  }
}
extension Foundation.Data : IdsvrHaapiSdk.Masking {
  public var masked: Swift.String {
    get
  }
}
extension Swift.Dictionary : IdsvrHaapiSdk.Masking where Key == Swift.String {
  public var masked: Swift.String {
    get
  }
}
extension Foundation.URLRequest : IdsvrHaapiSdk.Masking {
  public var masked: Swift.String {
    get
  }
}
extension Swift.String {
  public static func optionalData(_ data: Foundation.Data?, encoding: Swift.String.Encoding = .utf8, fallback: Swift.String = "") -> Swift.String
  public var maskedPrefix: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @available(iOS 14.0, *)
final public class AuthorizationProblem : IdsvrHaapiSdk.Problem {
  final public let error: Swift.String
  final public let errorDescription: Swift.String?
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @available(iOS 14.0, *)
final public class InvalidInputProblem : IdsvrHaapiSdk.Problem {
  final public let invalidFields: [IdsvrHaapiSdk.InvalidInputProblem.InvalidField]
  final public let errorDescription: Swift.String?
  public struct InvalidField : Swift.Decodable, Swift.Equatable {
    public let name: Swift.String
    public let reason: Swift.String?
    public let detail: IdsvrHaapiSdk.Message
    public init(from decoder: any Swift.Decoder) throws
    public static func == (a: IdsvrHaapiSdk.InvalidInputProblem.InvalidField, b: IdsvrHaapiSdk.InvalidInputProblem.InvalidField) -> Swift.Bool
  }
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@available(iOS 14.0, *)
public struct Message : Swift.Equatable, Swift.CustomStringConvertible {
  public let key: Swift.String?
  public let literal: Swift.String
  public var description: Swift.String {
    get
  }
  public static func == (a: IdsvrHaapiSdk.Message, b: IdsvrHaapiSdk.Message) -> Swift.Bool
}
public protocol RepresentationActionModel : Swift.Decodable, Swift.Equatable {
}
@available(iOS 14.0, *)
public struct FormActionModel : IdsvrHaapiSdk.RepresentationActionModel {
  public let actionTitle: IdsvrHaapiSdk.Message?
  public let continueActions: [IdsvrHaapiSdk.Action]
  public let errorActions: [IdsvrHaapiSdk.Action]
  public let fields: [IdsvrHaapiSdk.FormField]
  public let type: Swift.String
  public let method: Swift.String
  public let href: Swift.String
  public init(from decoder: any Swift.Decoder) throws
  public static func == (lhs: IdsvrHaapiSdk.FormActionModel, rhs: IdsvrHaapiSdk.FormActionModel) -> Swift.Bool
}
@available(iOS 14.0, *)
public struct SelectorActionModel : IdsvrHaapiSdk.RepresentationActionModel {
  public let options: [IdsvrHaapiSdk.Action]
  public init(from decoder: any Swift.Decoder) throws
  public static func == (a: IdsvrHaapiSdk.SelectorActionModel, b: IdsvrHaapiSdk.SelectorActionModel) -> Swift.Bool
}
@available(iOS 14.0, *)
public class ClientOperationActionModel : IdsvrHaapiSdk.RepresentationActionModel {
  final public let name: IdsvrHaapiSdk.ClientOperationName
  final public let continueActions: [IdsvrHaapiSdk.Action]
  final public let errorActions: [IdsvrHaapiSdk.Action]
  required public init(from decoder: any Swift.Decoder) throws
  public static func == (lhs: IdsvrHaapiSdk.ClientOperationActionModel, rhs: IdsvrHaapiSdk.ClientOperationActionModel) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @available(iOS 14.0, *)
final public class ExternalBrowserClientOperationActionModel : IdsvrHaapiSdk.ClientOperationActionModel {
  final public let href: Swift.String
  required public init(from decoder: any Swift.Decoder) throws
  final public func urlToLaunch(redirectTo: Swift.String) -> Foundation.URL?
  @objc deinit
}
@_inheritsConvenienceInitializers @available(iOS 14.0, *)
final public class BankIdClientOperationActionModel : IdsvrHaapiSdk.ClientOperationActionModel {
  final public let autoStartToken: Swift.String
  final public let redirect: Swift.String
  final public let href: Swift.String
  required public init(from decoder: any Swift.Decoder) throws
  final public func urlToLaunch(redirectTo: Swift.String) -> Foundation.URL?
  @objc deinit
}
@_inheritsConvenienceInitializers @available(iOS 14.0, *)
final public class EncapAutoActivationClientOperationActionModel : IdsvrHaapiSdk.ClientOperationActionModel {
  final public let activationCode: Swift.String
  final public let href: Swift.String
  required public init(from decoder: any Swift.Decoder) throws
  final public var urlToLaunch: Foundation.URL? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @available(iOS 14.0, *)
final public class WebAuthnRegistrationClientOperationActionModel : IdsvrHaapiSdk.ClientOperationActionModel {
  final public let arguments: [Swift.String : Any]
  final public var platformOptions: IdsvrHaapiSdk.WebAuthnRegistrationClientOperationActionModel.PlatformCredentialRequestOptions?
  final public var crossPlatformOptions: IdsvrHaapiSdk.WebAuthnRegistrationClientOperationActionModel.CrossPlatformCredentialRequestOptions?
  final public var fallbackActions: [IdsvrHaapiSdk.Action] {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
  @_hasMissingDesignatedInitializers public class CredentialRequestOptions {
    final public let relyingPartyId: Swift.String?
    final public let challengeData: Foundation.Data?
    final public let userIdData: Foundation.Data?
    final public let userName: Swift.String?
    final public let displayName: Swift.String?
    final public let userVerification: Swift.String?
    final public let attestation: Swift.String?
    @objc deinit
  }
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class PlatformCredentialRequestOptions : IdsvrHaapiSdk.WebAuthnRegistrationClientOperationActionModel.CredentialRequestOptions {
    @objc deinit
  }
  @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class CrossPlatformCredentialRequestOptions : IdsvrHaapiSdk.WebAuthnRegistrationClientOperationActionModel.CredentialRequestOptions {
    final public let publicKeyCredParams: [IdsvrHaapiSdk.WebAuthnRegistrationClientOperationActionModel.CredentialParams]?
    final public let excludedCredentials: [IdsvrHaapiSdk.WebAuthnRegistrationClientOperationActionModel.ExcludedCredential]?
    @objc deinit
  }
  @_hasMissingDesignatedInitializers final public class CredentialParams {
    final public let algorithmId: Swift.Int
    final public let type: Swift.String
    @objc deinit
  }
  @_hasMissingDesignatedInitializers final public class ExcludedCredential {
    final public let credentialID: Foundation.Data
    final public let type: Swift.String
    @objc deinit
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @available(iOS 14.0, *)
final public class WebAuthnAuthenticationClientOperationActionModel : IdsvrHaapiSdk.ClientOperationActionModel {
  final public let arguments: [Swift.String : Any]
  final public var credentialOptions: IdsvrHaapiSdk.WebAuthnAuthenticationClientOperationActionModel.CredentialRequestOptions
  final public var fallbackActions: [IdsvrHaapiSdk.Action] {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
  @_hasMissingDesignatedInitializers final public class CredentialRequestOptions {
    final public let relyingPartyId: Swift.String?
    final public let challengeData: Foundation.Data?
    final public let platformAllowCredentials: [IdsvrHaapiSdk.WebAuthnAuthenticationClientOperationActionModel.AllowedCredential]?
    final public let crossPlatformAllowCredentials: [IdsvrHaapiSdk.WebAuthnAuthenticationClientOperationActionModel.AllowedCredential]?
    final public let userVerificationPreference: Swift.String?
    @objc deinit
  }
  @_hasMissingDesignatedInitializers final public class AllowedCredential {
    final public let credentialID: Foundation.Data
    final public let type: Swift.String
    @objc deinit
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @available(iOS 14.0, *)
final public class GenericClientOperationActionModel : IdsvrHaapiSdk.ClientOperationActionModel {
  final public let arguments: [Swift.String : Any]
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@available(iOS 14.0, *)
@frozen public enum PollingStatus : Swift.Decodable, Swift.Equatable {
  case pending
  case done
  case failed
}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.PollingStatus : Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.TextFormField.Kind : Swift.Sendable {}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.TokenRevocationResponse : Swift.Sendable {}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.ProblemType : Swift.Sendable {}
@available(iOS 14, *)
extension IdsvrHaapiSdk.MimeTypes : Swift.Equatable {}
@available(iOS 14, *)
extension IdsvrHaapiSdk.MimeTypes : Swift.Hashable {}
@available(iOS 14, *)
extension IdsvrHaapiSdk.MimeTypes : Swift.RawRepresentable {}
extension IdsvrHaapiSdk.SdkFollowUpTag : Swift.Equatable {}
extension IdsvrHaapiSdk.SdkFollowUpTag : Swift.Hashable {}
extension IdsvrHaapiSdk.SdkFollowUpTag : Swift.RawRepresentable {}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.ActionKind : Swift.Sendable {}
extension IdsvrHaapiSdk.DriverFollowUpTag : Swift.Equatable {}
extension IdsvrHaapiSdk.DriverFollowUpTag : Swift.Hashable {}
extension IdsvrHaapiSdk.DriverFollowUpTag : Swift.RawRepresentable {}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.RepresentationType : Swift.Hashable {}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.RepresentationType : Swift.Sendable {}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.ClientOperationName : Swift.Sendable {}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.PollingStatus : Swift.Hashable {}
@available(iOS 14.0, *)
extension IdsvrHaapiSdk.PollingStatus : Swift.Sendable {}
