// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.1 (swiftlang-1200.0.41 clang-1200.0.32.8)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name IdsvrHaapiSdk
import CommonCrypto
import Compression
import CryptoKit
import DeviceCheck
import Foundation
import LocalAuthentication
import Security
import Swift
import os
public enum HaapiError : Swift.Error {
  case communication(message: Swift.String, cause: Swift.Error? = nil)
  case serverError(statusCode: Swift.Int)
  case attestationNotSupported
  case attestationFailure(cause: Swift.Error? = nil)
  case attestationKeyGenFailure(cause: Swift.Error? = nil)
  case attestationRefusedByServer(cause: Swift.Error? = nil)
  case assertionFailure(cause: Swift.Error? = nil)
  case dpopKeyCreationFailure(cause: Swift.Error)
  case dpopProofCreationFailure(cause: Swift.Error)
  case haapiTokenManagerIsClosed
  case haapiTokenManagerIsExpired
  case illegalState(message: Swift.String)
}
public class Dpop {
  final public let jwkThumbprint: Swift.String
  public init() throws
  public func createProof(httpMethod: Swift.String, url: Foundation.URL) throws -> Swift.String
  public func getHeaderValue(httpMethod: Swift.String, url: Foundation.URL) throws -> Swift.String
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class HaapiTokenManager : ObjectiveC.NSObject {
  public func close()
  public func clearState()
  public class Builder {
    public init(tokenEndpoint: Foundation.URL, clientId: Swift.String)
    public func setName(_ name: Swift.String) -> IdsvrHaapiSdk.HaapiTokenManager.Builder
    public func setStorage(_ storage: IdsvrHaapiSdk.Storage) -> IdsvrHaapiSdk.HaapiTokenManager.Builder
    public func setInternalUrlSession(_ urlSession: Foundation.URLSession) -> IdsvrHaapiSdk.HaapiTokenManager.Builder
    public func setHaapiTokenMinTtl(_ minTtl: Foundation.TimeInterval) -> IdsvrHaapiSdk.HaapiTokenManager.Builder
    public func disableDeviceCheckAttestation() -> IdsvrHaapiSdk.HaapiTokenManager.Builder
    public func build() -> IdsvrHaapiSdk.HaapiTokenManager
    @objc deinit
  }
  public func createClient(urlSession: Foundation.URLSession = .shared) -> IdsvrHaapiSdk.HaapiClient
  public func getHaapiTokenAsync(forceFresh: Swift.Bool = false, callbackDispatchQueue: Dispatch.DispatchQueue = DispatchQueue.main, completionHandler: @escaping (Swift.Result<IdsvrHaapiSdk.DpopAccessTokenInfo, IdsvrHaapiSdk.HaapiError>) -> Swift.Void)
  public func getHaapiToken(forceFresh: Swift.Bool = false) -> Swift.Result<IdsvrHaapiSdk.DpopAccessTokenInfo, IdsvrHaapiSdk.HaapiError>
  @objc deinit
  @objc override dynamic public init()
}
public enum HttpHeaderNames {
  public static let accept: Swift.String
  public static let authorization: Swift.String
  public static let contentType: Swift.String
  public static let dpop: Swift.String
  public static let haapiSessionId: Swift.String
  public static let haapiSetSessionId: Swift.String
}
public enum MimeTypes {
  public static let haapi: Swift.String
  public static let json: Swift.String
  public static let xWwwFormUrlEncoded: Swift.String
}
extension Data {
  public init?(base64URLEncoded base64URLString: Swift.String)
  public init?(base64URLEncoded base64URLData: Foundation.Data)
  public func base64URLEncodedString() -> Swift.String
  public func base64URLEncodedData() -> Foundation.Data
}
extension Data {
  public init(_ data: Foundation.Data)
  public func data() -> Foundation.Data
}
public enum StorageError : Swift.Error {
  case writeError(cause: Swift.Error)
  case readError(cause: Swift.Error)
  case deleteError(cause: Swift.Error)
}
public protocol Storage {
  func read(key: Swift.String) throws -> Foundation.Data?
  func write(key: Swift.String, data: Foundation.Data) throws
  func delete(key: Swift.String) throws
}
extension URLResponse {
  public func haapiSessionId() -> Swift.String?
}
extension URLRequest {
  public mutating func addAuthorizationHeader(headerValue: Swift.String)
  public mutating func addDpopHeader(headerValue: Swift.String)
  public mutating func addDpopAccessTokenHeaders(from dpopAccessTokenInfo: IdsvrHaapiSdk.DpopAccessTokenInfo, httpMethod: Swift.String, url: Foundation.URL) throws
  public mutating func addHaapiMediaTypeAcceptHeader()
  public mutating func addHaapiSessionIdHeader(_ sessionId: Swift.String)
}
public struct ResponseAndData {
  public let response: Foundation.URLResponse
  public let data: Foundation.Data?
}
@_hasMissingDesignatedInitializers public class HaapiClient {
  public func performDataTask(for urlRequest: Foundation.URLRequest, completionHandler: @escaping (Swift.Result<IdsvrHaapiSdk.ResponseAndData, Swift.Error>) -> Swift.Void)
  @objc deinit
}
public struct AccessToken : Swift.CustomStringConvertible {
  public let value: Swift.String
  public let expiresOn: Foundation.Date
  public func isValid(atTime: Foundation.Date, minTtl: Foundation.TimeInterval) -> Swift.Bool
  public var description: Swift.String {
    get
  }
}
public struct DpopAccessTokenInfo : Swift.CustomStringConvertible {
  public let accessToken: IdsvrHaapiSdk.AccessToken
  public let dpop: IdsvrHaapiSdk.Dpop
  public var description: Swift.String {
    get
  }
  public func dpopHeaderValue(httpMethod: Swift.String, url: Foundation.URL) throws -> Swift.String
  public func authorizationHeaderValue() -> Swift.String
}
